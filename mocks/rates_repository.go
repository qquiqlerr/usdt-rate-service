// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "usdt-rate-service/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockRatesRepository is an autogenerated mock type for the RatesRepository type
type MockRatesRepository struct {
	mock.Mock
}

type MockRatesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRatesRepository) EXPECT() *MockRatesRepository_Expecter {
	return &MockRatesRepository_Expecter{mock: &_m.Mock}
}

// SaveRate provides a mock function with given fields: ctx, rate
func (_m *MockRatesRepository) SaveRate(ctx context.Context, rate *models.Rate) error {
	ret := _m.Called(ctx, rate)

	if len(ret) == 0 {
		panic("no return value specified for SaveRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Rate) error); ok {
		r0 = rf(ctx, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRatesRepository_SaveRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRate'
type MockRatesRepository_SaveRate_Call struct {
	*mock.Call
}

// SaveRate is a helper method to define mock.On call
//   - ctx context.Context
//   - rate *models.Rate
func (_e *MockRatesRepository_Expecter) SaveRate(ctx interface{}, rate interface{}) *MockRatesRepository_SaveRate_Call {
	return &MockRatesRepository_SaveRate_Call{Call: _e.mock.On("SaveRate", ctx, rate)}
}

func (_c *MockRatesRepository_SaveRate_Call) Run(run func(ctx context.Context, rate *models.Rate)) *MockRatesRepository_SaveRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Rate))
	})
	return _c
}

func (_c *MockRatesRepository_SaveRate_Call) Return(_a0 error) *MockRatesRepository_SaveRate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRatesRepository_SaveRate_Call) RunAndReturn(run func(context.Context, *models.Rate) error) *MockRatesRepository_SaveRate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRatesRepository creates a new instance of MockRatesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRatesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRatesRepository {
	mock := &MockRatesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
